import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  TooltipProps,
  Area
} from "recharts";
import { 
  NameType, 
  ValueType 
} from "recharts/types/component/DefaultTooltipContent";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useState, useMemo } from "react";
import { motion } from "framer-motion";
import { TrendingUp, Award, DollarSign } from "lucide-react";

export type RoundData = {
  round: number;
  actualScore: number;
  projectedScore: number;
  rank: number;
  teamValue: number;
};

type PerformanceChartProps = {
  data: RoundData[];
};

type ChartView = "score" | "rank" | "teamValue";

const CustomTooltip = ({ active, payload, label, viewType }: TooltipProps<ValueType, NameType> & { viewType: ChartView }) => {
  if (active && payload && payload.length) {
    return (
      <motion.div 
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        className="bg-gray-800/95 backdrop-blur-sm border border-gray-600 shadow-2xl rounded-xl p-3 text-sm"
      >
        <div className="font-semibold mb-2 text-white border-b border-gray-600 pb-1">
          Round {label}
        </div>
        <div className="space-y-1">
          {payload.map((entry, index) => (
            <div key={index} className="flex items-center justify-between" style={{ color: entry.color as string }}>
              <div className="flex items-center">
                <div 
                  className="w-3 h-3 rounded-full mr-2 shadow-lg" 
                  style={{ backgroundColor: entry.color as string }}
                ></div>
                <span className="font-medium">{entry.name}:</span>
              </div>
              <span className="font-bold ml-2">
                {viewType === "teamValue" 
                  ? `$${((entry.value as number) / 1000000).toFixed(1)}M`
                  : viewType === "rank" 
                    ? `#${entry.value}`
                    : entry.value
                }
              </span>
            </div>
          ))}
        </div>
      </motion.div>
    );
  }
  return null;
};

const ViewTypeIcon = ({ viewType }: { viewType: ChartView }) => {
  switch (viewType) {
    case "score":
      return <TrendingUp className="h-4 w-4" />;
    case "rank":
      return <Award className="h-4 w-4" />;
    case "teamValue":
      return <DollarSign className="h-4 w-4" />;
    default:
      return <TrendingUp className="h-4 w-4" />;
  }
};

export default function PerformanceChart({ data }: PerformanceChartProps) {
  const [viewType, setViewType] = useState<ChartView>("score");

  const chartData = useMemo(() => 
    [...data].sort((a, b) => a.round - b.round), 
    [data]
  );

  const getDomain = useMemo(() => {
    if (viewType === "score") {
      const maxScore = Math.max(...chartData.map(d => Math.max(d.actualScore, d.projectedScore)));
      return [0, Math.ceil(maxScore * 1.1)];
    } else if (viewType === "rank") {
      const maxRank = Math.max(...chartData.map(d => d.rank));
      return [0, Math.ceil(maxRank * 1.1)];
    } else {
      const maxValue = Math.max(...chartData.map(d => d.teamValue));
      return [0, Math.ceil(maxValue * 1.1)];
    }
  }, [chartData, viewType]);

  const getDataKeys = useMemo(() => {
    if (viewType === "score") {
      return { 
        actual: "actualScore", 
        projected: "projectedScore", 
        actualLabel: "Actual Score", 
        projectedLabel: "Projected Score" 
      };
    } else if (viewType === "rank") {
      return { 
        actual: "rank", 
        projected: null, 
        actualLabel: "Rank", 
        projectedLabel: null 
      };
    } else {
      return { 
        actual: "teamValue", 
        projected: null, 
        actualLabel: "Team Value", 
        projectedLabel: null 
      };
    }
  }, [viewType]);

  const dataKeys = getDataKeys;
  const domain = getDomain;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Card className="bg-gradient-to-br from-gray-800 to-gray-900 border-2 border-red-500/20 shadow-2xl relative overflow-hidden group hover:border-red-500/40 transition-all duration-300">
        <div className="absolute inset-0 bg-gradient-to-br from-red-500/10 via-transparent to-blue-500/5 pointer-events-none"></div>
        <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-red-500 to-blue-500"></div>
        
        <CardHeader className="pb-3">
          <div className="flex justify-between items-center">
            <motion.h2 
              className="text-xl font-bold text-white flex items-center gap-2"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.2 }}
            >
              <ViewTypeIcon viewType={viewType} />
              Performance Overview
            </motion.h2>
            <Select value={viewType} onValueChange={(value) => setViewType(value as ChartView)}>
              <SelectTrigger className="w-[140px] bg-gray-700/80 backdrop-blur-sm border-gray-600 text-white hover:bg-gray-600/80 transition-colors">
                <SelectValue placeholder="Select view" />
              </SelectTrigger>
              <SelectContent className="bg-gray-800 border-gray-600 backdrop-blur-sm">
                <SelectItem value="score" className="text-white hover:bg-gray-700 focus:bg-gray-700">
                  Score
                </SelectItem>
                <SelectItem value="rank" className="text-white hover:bg-gray-700 focus:bg-gray-700">
                  Rank
                </SelectItem>
                <SelectItem value="teamValue" className="text-white hover:bg-gray-700 focus:bg-gray-700">
                  Team Value
                </SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardHeader>

        <CardContent className="p-4 relative">
          <div className="h-[350px] relative">
            <div className="absolute inset-0 bg-gradient-to-t from-gray-900/50 to-transparent rounded-2xl pointer-events-none"></div>
            <ResponsiveContainer width="100%" height="100%">
              <LineChart
                data={chartData}
                margin={{
                  top: 10,
                  right: 15,
                  left: 10,
                  bottom: 25,
                }}
              >
                <defs>
                  <linearGradient id="redGlow" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor="#ef4444" stopOpacity={0.8}/>
                    <stop offset="100%" stopColor="#ef4444" stopOpacity={0.1}/>
                  </linearGradient>
                  <linearGradient id="greenGlow" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor="#22c55e" stopOpacity={0.8}/>
                    <stop offset="100%" stopColor="#22c55e" stopOpacity={0.1}/>
                  </linearGradient>
                  <filter id="redGlowFilter" x="-50%" y="-50%" width="200%" height="200%">
                    <feGaussianBlur in="SourceGraphic" stdDeviation="3" result="blur" />
                    <feColorMatrix in="blur" type="matrix" values="1 0 0 0 0  0 0.1 0 0 0  0 0 0 0 0  0 0 0 0.8 0" result="glow"/>
                    <feBlend in="SourceGraphic" in2="glow" mode="screen"/>
                  </filter>
                </defs>
                
                <CartesianGrid 
                  strokeDasharray="3 3" 
                  stroke="#374151" 
                  opacity={0.3} 
                  horizontal={true}
                  vertical={false}
                />
                
                <XAxis 
                  dataKey="round"
                  axisLine={false}
                  tickLine={false}
                  tick={{ fill: '#D1D5DB', fontSize: 11, fontWeight: 500 }}
                  interval={2}
                  tickFormatter={(value) => `R${value}`}
                  padding={{ left: 10, right: 10 }}
                />
                
                <YAxis 
                  axisLine={false}
                  tickLine={false}
                  tick={{ fill: '#D1D5DB', fontSize: 11, fontWeight: 500 }}
                  domain={domain}
                  tickFormatter={(value) => {
                    if (viewType === "teamValue") {
                      return `$${(value / 1000000).toFixed(0)}M`;
                    } else if (viewType === "rank") {
                      return `#${value}`;
                    }
                    return value.toString();
                  }}
                  width={40}
                />
                
                <Tooltip
                  content={(props) => <CustomTooltip {...props} viewType={viewType} />}
                  cursor={{ 
                    stroke: '#6B7280', 
                    strokeWidth: 1, 
                    strokeDasharray: '5 5',
                  }}
                />

                {/* Area under the line for better visual appeal */}
                {viewType === "score" && dataKeys.projected && (
                  <Area
                    type="monotone"
                    dataKey={dataKeys.projected}
                    stroke="transparent"
                    fill="url(#greenGlow)"
                    fillOpacity={0.1}
                  />
                )}
                
                <Area
                  type="monotone"
                  dataKey={dataKeys.actual}
                  stroke="transparent"
                  fill="url(#redGlow)"
                  fillOpacity={0.2}
                />

                <Line
                  type="monotone"
                  dataKey={dataKeys.actual}
                  stroke="#ef4444"
                  strokeWidth={3}
                  dot={{ 
                    fill: '#ef4444', 
                    strokeWidth: 2, 
                    r: 4, 
                    stroke: '#ffffff',
                    filter: 'url(#redGlowFilter)'
                  }}
                  activeDot={{ 
                    r: 6, 
                    fill: '#ef4444', 
                    stroke: '#ffffff', 
                    strokeWidth: 2, 
                    filter: 'url(#redGlowFilter)'
                  }}
                  filter="url(#redGlowFilter)"
                  name={dataKeys.actualLabel}
                />
                
                {dataKeys.projected && (
                  <Line
                    type="monotone"
                    dataKey={dataKeys.projected}
                    stroke="#22c55e"
                    strokeWidth={2.5}
                    strokeDasharray="4 4"
                    dot={{ 
                      fill: '#22c55e', 
                      strokeWidth: 2, 
                      r: 3,
                      stroke: '#ffffff'
                    }}
                    activeDot={{ 
                      r: 5, 
                      fill: '#22c55e', 
                      stroke: '#ffffff', 
                      strokeWidth: 2 
                    }}
                    name={dataKeys.projectedLabel}
                    connectNulls={false}
                  />
                )}
              </LineChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
}
